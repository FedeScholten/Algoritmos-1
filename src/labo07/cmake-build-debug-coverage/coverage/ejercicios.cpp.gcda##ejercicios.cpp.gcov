        -:    0:Source:/home/jotavecorta/proyectos/algoritmos_1/src/labo07/ejercicios.cpp
        -:    0:Graph:/home/jotavecorta/proyectos/algoritmos_1/src/labo07/cmake-build-debug-coverage/CMakeFiles/Labo07.dir/ejercicios.cpp.gcno
        -:    0:Data:/home/jotavecorta/proyectos/algoritmos_1/src/labo07/cmake-build-debug-coverage/CMakeFiles/Labo07.dir/ejercicios.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ejercicios.h"
        -:    2:
function _Z17productoVectorialRKSt6vectorIiSaIiEES3_ called 3 returned 100% blocks executed 72%
        3:    3:vector<vector<int>> productoVectorial(const vector<int>& u, const vector<int>& v){
        -:    4:	// Guardo el tamaño de la matriz resultante
        3:    5:    int rows = u.size();
        3:    5-block  0
call    0 returned 3
        3:    6:    int columns = v.size();
call    0 returned 3
        -:    7:
        -:    8:    // Inicializo la variable donde guardar el producto, llena de ceros
        3:    9:    int fill_value = 0;
        6:   10:    vector<vector<int>> res (rows, vector<int>(columns, fill_value));
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   10-block  0
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 3
call    9 returned 3
    $$$$$:   10-block  1
    $$$$$:   10-block  2
    $$$$$:   10-block  3
        -:   11:
        -:   12:    // LLeno las entradas de res con el producto de las componentes de u y v
       11:   13:    for (int i = 0; i < rows; i++){
       11:   13-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 3
        8:   13-block  1
       30:   14:        for (int j = 0; j < columns; j++){
        8:   14-block  0
       30:   14-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 8
       22:   15:            res[i][j] = u[i] * v[j];
       22:   15-block  0
call    0 returned 22
call    1 returned 22
call    2 returned 22
call    3 returned 22
        -:   16:        }
        -:   17:    }
        -:   18:
        6:   19:	return res;
        3:   19-block  0
        3:   19-block  1
        -:   20:}
        -:   21:
function _Z9trasponerRSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   22:void trasponer(vector<vector<int> > &m) {
        -:   23:    // Guardo el tamaño de la matriz resultante
    #####:   24:    int rows = m.size();
    %%%%%:   24-block  0
call    0 never executed
        -:   25:
        -:   26:    // LLeno las entradas de m con sus elementos traspuestos
    #####:   27:    for (int i = 0; i < rows; i++){
    %%%%%:   27-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   27-block  1
    #####:   28:        for (int j = 0; j < i; j++){
    %%%%%:   28-block  0
    %%%%%:   28-block  1
branch  0 never executed
branch  1 never executed
    #####:   29:            m[i][j] = m[i][j] + m[j][i];
    %%%%%:   29-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   30:            m[j][i] = m[i][j] - m[j][i];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   31:            m[i][j] -= m[j][i];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   32:        }
        -:   33:    }
        -:   34:
    #####:   35:}
        -:   36:
function _Z11multiplicarRKSt6vectorIS_IiSaIiEESaIS1_EES5_ called 0 returned 0% blocks executed 0%
    #####:   37:vector<vector<int>> multiplicar(const vector<vector<int>> &m1, const vector<vector<int>> &m2){
        -:   38:    // Guardo el tamaño de la matriz producto
    #####:   39:    int rows = m1.size();
    %%%%%:   39-block  0
call    0 never executed
    #####:   40:    int columns = m2[0].size();
call    0 never executed
call    1 never executed
        -:   41:
        -:   42:    // Inicializo la variable donde guardar el producto, llena de ceros
    #####:   43:    int fill_value = 0;
    #####:   44:    vector<vector<int>> res (rows, vector<int>(columns, fill_value));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   44-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:   44-block  1
    $$$$$:   44-block  2
    $$$$$:   44-block  3
        -:   45:
        -:   46:    // LLeno las entradas de res con el producto de las componentes de u y v
    #####:   47:    for (int i = 0; i < rows; i++){
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   47-block  1
    #####:   48:        for (int j = 0; j < columns; j++){
    %%%%%:   48-block  0
    %%%%%:   48-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   48-block  2
    #####:   49:            for (int k = 0; k < m2.size(); k++){
    %%%%%:   49-block  0
    %%%%%:   49-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:                res[i][j] += m1[i][k] * m2[k][j];
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   51:            }
        -:   52:        }
        -:   53:    }
        -:   54:
    #####:   55:	return res;
    %%%%%:   55-block  0
    %%%%%:   55-block  1
        -:   56:}
        -:   57:
function _Z9promediarSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   58:vector<vector<int> > promediar(vector<vector<int> > m){
        -:   59:	//COMPLETAR
    #####:   60:	vector<vector<int> > res;
    %%%%%:   60-block  0
call    0 never executed
    #####:   61:	return res;
        -:   62:}
        -:   63:
function _Z11contarPicosSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   64:int contarPicos(vector<vector<int> > m){
        -:   65:	//COMPLETAR
    #####:   66:	return true;
    %%%%%:   66-block  0
        -:   67:}
        -:   68:
function _Z12esTriangularSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   69:bool esTriangular(vector<vector<int> > m){
        -:   70:	//COMPLETAR
    #####:   71:	return true;
    %%%%%:   71-block  0
        -:   72:}
        -:   73:
function _Z10hayAmenazaSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   74:bool hayAmenaza(vector<vector<int> > m){
        -:   75:	//COMPLETAR
    #####:   76:	return true;
    %%%%%:   76-block  0
        -:   77:}
        -:   78:
function _Z20diferenciaDiagonalesSt6vectorIS_IiSaIiEESaIS1_EE called 0 returned 0% blocks executed 0%
    #####:   79:int diferenciaDiagonales(vector<vector<int> > m) {
        -:   80:    //COMPLETAR
    #####:   81:    return 0;
    %%%%%:   81-block  0
        -:   82:}
